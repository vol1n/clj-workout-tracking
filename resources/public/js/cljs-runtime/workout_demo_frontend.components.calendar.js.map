{"version":3,"sources":["workout_demo_frontend/components/calendar.cljs"],"mappings":"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","names":["workout-demo-frontend.components.calendar/months","workout-demo-frontend.components.calendar/days","workout-demo-frontend.components.calendar/decrement-month","month","year","cljs.core._EQ_","workout-demo-frontend.components.calendar/increment-month","workout-demo-frontend.components.calendar/current-date","js/Date","workout-demo-frontend.components.calendar/selected-month","reagent.core.atom","map__27692","cljs.core/--destructure-map","cljs.core.get","workout-demo-frontend.components.calendar/first-day-of-month","first-of-month","workout-demo-frontend.components.calendar/get-days-in-month","vec__27693","cljs.core.nth","next-month","next-year","last-of-this-month","workout-demo-frontend.components.calendar/chevron-right","workout-demo-frontend.components.calendar/chevron-left","workout-demo-frontend.components.calendar/month-summary","workout-demo-frontend.components.calendar/calendar-header","map__27696","cljs.core/deref","vec__27697","new-month","new-year","cljs.core/reset!","vec__27700","workout-demo-frontend.components.calendar/is-past-date?","day","date","today","workout-demo-frontend.components.calendar/is-current-date?","input-day","input-month","input-year","map__27703","workout-demo-frontend.components.calendar/selected-day","workout-demo-frontend.components.calendar/day-cell","summary","past?","current?","symbols","cljs.core.mapv","cljs.core.keyword","symbols-string","clojure.string.join","base-classes","cljs.core.not_EQ_","cljs.core/count","workout-demo-frontend.components.calendar/update-month-summary!","cljs.core.println","p1__27705#","p1__27706#","workout-demo-frontend.auth/api-call","ajax.core/GET","cljs.core.swap_BANG_","cljs.core/assoc","js/console.error","js/workout-demo-frontend","js/workout-demo-frontend.components","js/workout-demo-frontend.components.calendar","js/workout-demo-frontend.components.calendar.fetch-trigger","workout-demo-frontend.components.calendar/fetch-trigger","co__27520__auto__","reagent.ratom.make_reaction","map__27708","workout-demo-frontend.auth/logged-in?","or__5045__auto__","cljs.core/not","workout-demo-frontend.components.calendar/calendar","map__27710","this-month","iter__5523__auto__","s__27713","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__27715","cljs.core/chunk-buffer","i__27714","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__27712","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","s__27717","b__27719","i__27718","iter__27716","i","cljs.core.range","s__27723","b__27725","i__27724","iter__27722","workout-demo-frontend.components.workout2/select-workout","cljs.core/chunk-first"],"sourcesContent":["(ns workout-demo-frontend.components.calendar (:require [reagent.core :as r]\n[reagent.ratom :as ratom]\n[ajax.core :refer [GET]]\n[workout-demo-frontend.components.workout2 :refer [select-workout]]\n[clojure.string :as str]\n[workout-demo-frontend.auth :refer [api-call logged-in?]]))\n\n(def months [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"])\n(def days [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"])\n\n(defn decrement-month [month year]\n    (if (= month 0)\n        [11 (dec year)]\n    [(dec month) year]))\n\n(defn increment-month [month year]\n    (if (= month 11)\n        [0 (inc year)]\n    [(inc month) year]))\n\n(def current-date {:month (.getMonth (js/Date.))\n                           :year (.getFullYear (js/Date.))\n                           :day (.getDate (js/Date.))})\n\n(def selected-month (r/atom (let [{:keys [month year]} current-date]\n    {:month month\n     :year year})))\n\n(defn first-day-of-month [month year]\n    (let [first-of-month (js/Date. year month 1)]\n        (.getDay first-of-month)))\n\n(defn get-days-in-month [month year]\n    (let [[next-month next-year] (increment-month month year) ;; Unlike elisp, let always expands to let* under the hood\n        last-of-this-month (js/Date. next-year next-month 0)]\n        (.getDate last-of-this-month)))\n\n(defn chevron-right []\n    [:svg {:class \"w-6 h-6\" :xmlns \"http://www.w3.org/2000/svg\" :fill \"none\" :viewBox \"0 0 24 24\" :stroke \"currentColor\"}\n        [:path {:stroke-linecap \"round\" :stroke-linejoin \"round\" :stroke-width \"2\" :d \"M9 5l7 7-7 7\"}]])\n\n(defn chevron-left []\n    [:svg {:class \"w-6 h-6\" :xmlns \"http://www.w3.org/2000/svg\" :fill \"none\" :viewBox \"0 0 24 24\" :stroke \"currentColor\"}\n        [:path {:stroke-linecap \"round\" :stroke-linejoin \"round\" :stroke-width \"2\" :d \"M15 19l-7-7 7-7\"}]])\n\n(def month-summary (r/atom {}))\n\n(defn calendar-header []\n    (let [{:keys [month year]} @selected-month]\n        [:div {:class \"flex items-center justify-between mb-4\"}\n            [:button {:class \"p-2 hover:bg-gray-100 rounded-full\"\n                :on-click #(let [[new-month new-year] (decrement-month month year)]\n                (reset! selected-month {:month new-month :year new-year}))}\n                [chevron-left]\n                ]\n            [:h2 {:class \"text-xl font-bold\"}(months month) \" \" year]\n            [:button {:class \"p-2 hover:bg-gray-100 rounded-full\"\n                     :on-click #(let [[new-month new-year] (increment-month month year)]\n                                (reset! selected-month {:month new-month :year new-year}))}\n                [chevron-right]]]))\n\n(defn is-past-date? [day month year]\n    (let [date (js/Date. year month day)\n          today (js/Date.)]\n        (< (.getTime date) (.setHours today 0 0 0 0))))\n\n(defn is-current-date? [input-day input-month input-year]\n    (let [{:keys [day month year]} current-date]\n        (and (= input-day day)\n             (= input-month month)\n             (= input-year year))))\n\n(def selected-day (r/atom nil))\n\n(defn day-cell [day month year summary]\n    (let [past? (is-past-date? day month year)\n          current? (is-current-date? day month year)\n          symbols (mapv :symbol (get summary (keyword (str day))))\n          symbols-string (str/join \"\" symbols)\n          base-classes \"w-10 h-10 flex items-center justify-center rounded-full\"]\n        [:div {:class \"flex items-center justify-center h-10\"}\n            [:div {:class (str base-classes \" \"\n                              (cond\n                                (not= (count symbols) 0) \"bg-green-300 hover:bg-green-400 transition duration-200 text-white\"\n                                current? \"bg-blue-500 hover:bg-blue-600 transition duration-200 text-white\"\n                                past? \"bg-gray-100 hover:bg-gray-200 transition duration-200\"\n                                :else \"hover:bg-gray-50\"))\n                    :on-click #(reset! selected-day {:day day :month month :year year})}\n                (cond \n                (not= (count symbols-string) 0) symbols-string\n                :else day)]]))\n\n;; Together the two following functions are like a react query hook, fetching the month summary when the dependent state changes\n(defn update-month-summary! [month year]\n    (println \"fetching summary\")\n    (api-call GET \"http://localhost:3000/summary\"\n        {:params {:month month :year year}\n         :response-format :json\n         :keywords? true ;; Ensure response keys are keywordized\n         :handler #(swap! month-summary assoc {:month month :year year} %) ;; Callbacks\n         :error-handler #(js/console.error \"Failed to fetch summary\" %)}))\n\n(defonce fetch-trigger \n  (ratom/run! ;; Analagous to useEffect in React - except we don't need to specify deps - r/run returns nil whereas reaction returns something\n    (let [{:keys [month year]} @selected-month]\n        (println \"@logged-in?\" @logged-in?)\n        (when-not (or (get @month-summary {:month month :year year}) (not @logged-in?)) ;; Only fetch if we haven't already\n            (update-month-summary! month year)))))\n\n(defn calendar []\n    (if (nil? @selected-day)\n        (let [{:keys [month year]} @selected-month\n              summary @month-summary\n              this-month (get summary {:month month :year year})]\n            [:div {:class \"flex flex-col items-center\"}\n                [calendar-header]\n                [:div {:class \"grid grid-cols-7 gap-2 w-full mt-4 gap-y-10\"}\n                    (for [day days]\n                        ^{:key day}\n                        [:div {:class \"flex items-center justify-center h-10 font-semibold\"} day])\n                    (for [i (range (first-day-of-month month year))]\n                        ^{:key i}\n                        [:div {:class \"flex items-center justify-center h-10\"} \"\"])\n                    (for [day (range 1 (inc (get-days-in-month month year)))]\n                        ^{:key day}\n                        [day-cell day month year this-month])]])\n        [select-workout (:day @selected-day) (:month @selected-day) (:year @selected-day) #(reset! selected-day nil)]))\n    "]}