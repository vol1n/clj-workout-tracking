{"version":3,"sources":["workout_demo_frontend/components/workout2.cljs"],"mappings":"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","names":["workout-demo-frontend.components.workout2/app-state","reagent.core.atom","workout-demo-frontend.components.workout2/form-state","workout-demo-frontend.components.workout2/last-save","js/workout-demo-frontend","js/workout-demo-frontend.components","js/workout-demo-frontend.components.workout2","js/workout-demo-frontend.components.workout2.save-timeout","workout-demo-frontend.components.workout2/save-timeout","cljs.core.atom","workout-demo-frontend.components.workout2/format-time","timestamp","date","js/Date","hours","minutes","padded-minutes","cljs.core.println","workout-demo-frontend.components.workout2/fetch-workouts","day","month","year","on-success","p1__27588#","workout-demo-frontend.auth/api-call","ajax.core/GET","js/console.error","workout-demo-frontend.components.workout2/update-templates!","p1__27589#","cljs.core.swap_BANG_","prev","cljs.core.assoc","workout-demo-frontend.util.templates/fetch-templates","workout-demo-frontend.components.workout2/save-workout!","cljs.core/deref","current-form-state","p1__27590#","ajax.core/POST","cljs.core/reset!","cljs.core/assoc","workout-demo-frontend.components.workout2/update-template!","id","p1__27591#","exercises","build-new-exercise","exercise","iter__5523__auto__","s__27598","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__27600","cljs.core/chunk-buffer","i__27599","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__27597","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","_","cljs.core.range","G__27608","cljs.core/Keyword","js/Error","G__27612","cljs.core.keyword","cljs.core.get_in","new-exercises","cljs.core.mapv","workout-demo-frontend.util.templates/fetch-template","js/workout-demo-frontend.components.workout2.select-workout-trigger","workout-demo-frontend.components.workout2/select-workout-trigger","co__27520__auto__","reagent.ratom.make_reaction","selected-workout-id","selected-workout","p1__27613#","cljs.core/some","cljs.core._EQ_","and__5043__auto__","workout-demo-frontend.components.workout2/schedule-save!","js/clearTimeout","js/setTimeout","js/workout-demo-frontend.components.workout2.auto-save-workout-trigger","workout-demo-frontend.components.workout2/auto-save-workout-trigger","cljs.core.not_EQ_","workout-demo-frontend.components.workout2/update-workouts!","p1__27624#","workout-demo-frontend.components.workout2/time-entry","value","on-change","p1__27625#","p1__27626#","workout-demo-frontend.components.workout2/set-entry","weight-value","reps-value","on-weight-change","on-reps-change","G__27627","js/parseInt","G__27628","workout-demo-frontend.components.workout2/workout-form","workout-id","workout-name","p1__27629#","current-expanded","cljs.core.doall","s__27634","b__27636","i__27635","vec__27637","cljs.core.nth","iter__27633","vec__27654","index","cljs.core.map_indexed","cljs.core/vector","exercise-template","sets","s__27641","b__27643","i__27642","vec__27645","iter__27640","vec__27649","s__27658","b__27660","i__27659","vec__27661","iter__27657","vec__27665","j","set","G__27648","G__27652","G__27664","G__27668","p1__27630#","p1__27631#","cljs.core/assoc-in","p1__27632#","on-time-change","workout-demo-frontend.components.workout2/select-template","s__27670","b__27672","i__27671","vec__27673","iter__27669","vec__27676","template","workout-demo-frontend.components.list-button/list-button","workout-demo-frontend.components.workout2/select-workout","close-fn","current-app-state","wrapped-close-fn","workout-demo-frontend.components.icons/x-sign","s__27680","b__27682","i__27681","vec__27683","iter__27679","vec__27686","workout","workout-demo-frontend.components.icons/plus-sign","cljs.core/chunk-first"],"sourcesContent":["(ns workout-demo-frontend.components.workout2\n    (:require [reagent.core :as r]\n    [reagent.ratom :as ratom]\n    [ajax.core :refer [GET POST]]\n    [workout-demo-frontend.components.list-button :refer [list-button]]\n    [workout-demo-frontend.util.templates :refer [fetch-templates fetch-template]]\n    [workout-demo-frontend.components.icons :refer [plus-sign x-sign]]\n    [workout-demo-frontend.auth :refer [api-call]]))\n\n\n\n;; State\n(def app-state (r/atom {\n    :templates nil ;; the templates to choose from\n    :todays-workouts nil ;; [{:name \"Upper Body\", :symbol \"\ud83c\udfcb\ufe0f\"}]\n    :selected-workout nil ;; id or nil\n    :new-workout nil ;; set to true if add-workout is clicked, show select-template\n}))\n\n(def form-state (r/atom {\n    :template nil ;; id or nil\n    :exercises [] ;; the actual form data - load from template on template selection \n    :expanded nil ;; index of expanded exercise\n}))\n\n(def last-save (r/atom nil))\n(defonce save-timeout (atom nil))\n\n;; Util\n(defn format-time [timestamp]\n    (let [date (js/Date. timestamp)\n          hours (.getHours date)\n          minutes (.getMinutes date)\n          padded-minutes (if (< minutes 10) (str \"0\" minutes) minutes)]\n          (println \"hours \" hours)\n          (println \"minutes \" minutes)\n          (println \"date \" date)\n        (str hours \":\" padded-minutes)))\n\n;; API\n(defn fetch-workouts [day month year on-success]\n    (println \"fetching workouts\")\n    (api-call GET \"http://localhost:3000/workouts\"\n        {:params {:day day :month month :year year}\n         :response-format :json\n         :keywords? true ;; Ensure response keys are keywordized\n         :handler on-success\n         :error-handler #(js/console.error \"Failed to fetch summary\" %)}))\n\n(defn update-templates! []\n\n    (let [on-success #(swap! app-state (fn [prev] (assoc prev :templates %)))]\n        (fetch-templates on-success)))\n\n(defn save-workout! []\n    (let [current-form-state @form-state]\n        (api-call POST \"http://localhost:3000/workouts\"\n            {:params current-form-state\n             :format :json\n             :response-format :json\n             :keywords? true \n             :handler #(do\n                (println \"workout saved\")\n                (reset! last-save (js/Date.))\n                (swap! form-state assoc :exercises []))\n             :error-handler #(js/console.error \"Failed to add workout\" %)})))\n\n(defn update-template! [id]\n    (let [on-success #(do\n        (let [exercises (:exercises %)\n              build-new-exercise (fn [exercise] {:exercise {:name (:name exercise)\n                                                            :tracking-type (:tracking-type exercise)}\n                                                 :sets (for [_ (range (:num-sets exercise))]\n                                                         (case (keyword (get-in exercise [:tracking-type :ident]))\n                                                             :workout.exercise/weightxreps {:weight 0 :reps 0}\n                                                             :workout.exercise/time {:time 0}))})\n              new-exercises (mapv build-new-exercise exercises)]\n            (swap! form-state (fn [prev] (assoc prev :template id :exercises new-exercises)))\n            (swap! app-state (fn [prev] (assoc prev :new-workout false)))))]\n        (fetch-template id on-success)))\n\n\n;; \"hooks\"\n(defonce select-workout-trigger \n  (ratom/run! ;; Analagous to useEffect in React - except we don't need to specify deps - r/run returns nil whereas reaction returns something\n    (let [selected-workout-id (:selected-workout @app-state)\n          exercises (:exercises @form-state)\n          selected-workout (some #(when (= (:id %) selected-workout-id) %) (:todays-workouts @app-state))]\n        (println \"selected-workout-id \" selected-workout-id)\n        (println \"selected-workout \" selected-workout)\n      (when (and selected-workout-id (= (count exercises) 0))\n        (swap! form-state assoc :exercises (:exercises selected-workout))))))\n\n\n(defn schedule-save! []\n  ;; Clear any existing timeout\n  (when @save-timeout (js/clearTimeout @save-timeout))\n  ;; Set a new timeout for 3 seconds\n  (reset! save-timeout\n    (js/setTimeout\n      (fn []\n        (reset! save-timeout nil) ;; Clear timeout after execution\n        (save-workout!)) ;; Save the workout\n      3000))) ;; 3s delay\n\n(defonce auto-save-workout-trigger\n  (ratom/run!\n    (when (not= 0 (count (:exercises @form-state))) ;; Only trigger if form has data\n      (schedule-save!))))\n\n;; State management\n(defn update-workouts! [day month year] ;; \n    (let [on-success #(swap! app-state (fn [prev] (assoc prev :todays-workouts %)))]\n        (fetch-workouts day month year on-success)))\n\n;; Components\n;; Flow: select workout -> select template if adding workout -> workout form \n(defn time-entry [value on-change]\n    [:input {:class \"w-1/3\"\n            :value value\n            :on-change on-change}])\n        \n(defn set-entry [weight-value reps-value on-weight-change on-reps-change]\n    [:div {:class \"flex items-center gap-x-2\"}\n        [:label {:class \"w-1/3\"} \"Weight:\"]\n        [:input {:type \"number\"\n                 :class \"border p-2 rounded-md w-full\"\n                 :value weight-value ;; Controlled input value\n                 :on-change #(on-weight-change (js/parseInt (.. % -target -value)))}]\n        [:label {:class \"w-1/3\"} \"Reps:\"]\n        [:input {:type \"number\"\n                 :class \"border p-2 rounded-md w-full\"\n                 :value reps-value ;; Controlled input value\n                 :on-change #(on-reps-change (js/parseInt (.. % -target -value)))}]])\n\n(defn workout-form []\n    (let [workout-id (:selected-workout @app-state)\n          workout-name (some #(when (= (:id %) workout-id) (:name (:template %))) (:todays-workouts @app-state))\n          exercises (:exercises @form-state)]\n    [:div \n        [:h1 {:class \"text-2xl font-bold\"} workout-name]\n        [:label {:class \"w-1/3\"} \"Exercises:\"]\n            (let [current-expanded (:expanded @form-state)]\n                    (doall (for [[index exercise] (map-indexed vector exercises)]\n                        (let [exercise-template (:exercise exercise)\n                              sets (:sets exercise)]\n                        ^{:key index}\n                        [:div {:class \"border-gray-200 bg-white rounded-md\"}\n                            [:div {:on-click #(swap! form-state (fn [current-form-state] \n                                (if (= index current-expanded) \n                                    (assoc current-form-state :expanded nil)\n                                (assoc current-form-state :expanded index))))}\n                                [:h2 {:class \"text-lg font-bold\"} (:name exercise-template)]]\n                            (when (= current-expanded index) \n                                [:div {:class \"flex flex-col gap-y-4 mt-2\"}\n                                    (doall (for [[j set] (map-indexed vector sets)]\n                                        ^{:key j}\n                                        [:div {:class \"flex items-center gap-x-2\"}\n                                            (println (:tracking-type exercise-template))\n                                            (println \"foregin \")\n                                            (println (:exercises @form-state))\n                                            (println \"index \" index)\n                                            (println \"get-in\" (get-in (:exercises @form-state) [index :sets j]))\n                                            (case (keyword (:ident (:tracking-type exercise-template)))\n                                                :workout.exercise/weightxreps (let [on-weight-change #(swap! form-state assoc-in [:exercises index :sets j :weight] %)\n                                                                                    on-reps-change #(swap! form-state assoc-in [:exercises index :sets j :reps] %)]\n                                                    [set-entry (:weight set) (:reps set) on-weight-change on-reps-change])\n                                                :workout.exercise/time (let [on-time-change #(swap! form-state assoc-in % [:exercises index :sets j :time])]\n                                                    [time-entry (:time set) on-time-change]))]))])]))))]))\n\n(defn select-template []\n    (cond \n                (nil? (:templates @app-state)) [:p \"Loading...\"]\n                :else [:div {:class \"grid grid-cols-1 items-center gap-y-4 mt-6\"}\n                        (for [[index template] (map-indexed vector (:templates @app-state))]\n                            ^{:key index}\n                            [list-button {:text (:name template) :icon #(fn [] [:span {:class \"text-2xl\"} (:symbol template)]) :variant :secondary :on-click #(update-template! (:id template))}])]))\n\n(defn select-workout [day month year close-fn]\n   (when (nil? (:todays-workouts @app-state))\n        (update-workouts! day month year))\n    (when (nil? (:templates @app-state))\n        (update-templates!)) \n    (let [current-app-state @app-state\n          current-form-state @form-state\n          wrapped-close-fn #(do\n            (reset! app-state {:todays-workouts nil :selected-workout nil :new-workout nil})\n            (reset! form-state {:template nil :exercises [] :expanded nil})\n            (close-fn))]\n    (println \"current-app-state \" current-app-state)\n    (println \"current-form-state \" current-form-state)\n    [:div {:class \"relative p-4 bg-gray-50 min-h-screen\"} ;; Wrapper container\n        ;; X Button pinned to the top-right\n        [:button {:class \"absolute top-2 right-2 p-2 text-gray-500 hover:text-red-500\"\n                 :on-click wrapped-close-fn}\n            [x-sign]]\n            (cond \n                (:new-workout current-app-state) [select-template]\n                (nil? (:todays-workouts current-app-state)) [:p \"Loading...\"]\n                :else (cond \n                    (= (count (:exercises current-form-state)) 0) [:div {:class \"grid grid-cols-1 items-center gap-y-4 mt-6\"}\n                        (for [[index workout] (map-indexed vector (:todays-workouts current-app-state))]\n                            ^{:key index}\n                            [list-button {:subtext (format-time (:timestamp workout)) :icon #(fn [] [:span {:class \"text-2xl\"} (get-in workout [:template :symbol])]) :variant :secondary :text (get-in workout [:template :name]) :on-click #(swap! app-state assoc :selected-workout (:id workout)) :extra-classes \"w-1/2\"}])\n                        [list-button {:text \"Add Workout\" :icon plus-sign :variant :primary :on-click #(swap! app-state assoc :new-workout true) :extra-classes \"w-1/3\"}]]\n                    :else [workout-form (:selected-workout @app-state)]))]))"]}