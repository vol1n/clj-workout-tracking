{"version":3,"sources":["workout_demo_frontend/components/templates.cljs"],"mappings":"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","names":["workout-demo-frontend.components.templates/settings-state","reagent.core.atom","workout-demo-frontend.components.templates/form-data","workout-demo-frontend.components.templates/form-valid?","map__27887","cljs.core/deref","cljs.core/--destructure-map","cljs.core.get","name","symbol","exercises","invalid-symbol","cljs.core/not","cljs.core/re-matches","invalid-name","cljs.core/empty?","invalid-exercises","p1__27885#","cljs.core.mapv","or__5045__auto__","cljs.core._EQ_","errors","cljs.core.map_indexed","i","err","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core.println","cljs.core/not-any?","cljs.core/identity","p1__27886#","cljs.core/seq?","cljs.core/any?","cljs.core/vals","workout-demo-frontend.components.templates/update-templates","p1__27888#","on-success","workout-demo-frontend.util.templates/fetch-templates","workout-demo-frontend.components.templates/update-template","id","p1__27889#","prev","cljs.core.assoc","cljs.core/vec","workout-demo-frontend.util.templates/fetch-template","workout-demo-frontend.components.templates/save-template","p1__27890#","p1__27891#","current-form-state","get-tracking-type-kw","cljs.core.get_in","get-tracking-type-str","cljs.core/namespace","cljs.core/name","data","cljs.core.dissoc","p1__27892#","js/parseInt","p1__27893#","workout-demo-frontend.auth/api-call","ajax.core/POST","js/console.error","workout-demo-frontend.components.templates/new-template","workout-demo-frontend.components.templates/remove-at","v","cljs.core.concat","cljs.core.subvec","workout-demo-frontend.components.templates/remove-exercise","index","workout-demo-frontend.components.templates/add-exercise","cljs.core.conj","workout-demo-frontend.components.templates/template-editor","close-fn","p1__27894#","p1__27895#","workout-demo-frontend.components.icons/x-sign","cljs.core.doall","iter__5523__auto__","s__27900","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__27902","cljs.core/chunk-buffer","i__27901","vec__27903","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__27899","cljs.core/chunk-rest","vec__27906","cljs.core/first","cljs.core/cons","cljs.core/rest","exercise","cljs.core/vector","p1__27896#","p1__27897#","p1__27898#","tracking-type","cljs.core.keyword","cljs.core/assoc-in","workout-demo-frontend.components.list-button/list-button","workout-demo-frontend.components.icons/plus-sign","workout-demo-frontend.components.icons/check-mark","workout-demo-frontend.components.templates/select-template","cljs.core/reset!","current-settings-state","s__27910","b__27912","i__27911","vec__27913","iter__27909","vec__27916","template","cljs.core/chunk-first"],"sourcesContent":["(ns workout-demo-frontend.components.templates\n    (:require [reagent.core :as r]\n              [ajax.core :refer [POST]]\n              [workout-demo-frontend.components.list-button :refer [list-button]]\n              [workout-demo-frontend.util.templates :refer [fetch-templates fetch-template]]\n              [workout-demo-frontend.components.icons :refer [plus-sign x-sign check-mark]]\n              [workout-demo-frontend.auth :refer [api-call]]))\n\n(def settings-state (r/atom {\n    :templates nil ;; the templates to choose from\n    :selected-template nil ;; id or nil\n    :new-template nil \n}))\n\n(def form-data (r/atom {\n    :template nil ;; id or nil\n    :name nil\n    :symbol nil\n    :exercises [] ;; the actual form data - load from template on template selection \n    :expanded nil ;; index of expanded exercise\n    :errors {}\n}))\n\n(defn form-valid? []\n  (let [{:keys [name symbol exercises]} @form-data\n        invalid-symbol (or (nil? symbol) (not (re-matches #\".{1,2}\" symbol)))\n        invalid-name (or (nil? name) (empty? name)) \n        invalid-exercises (mapv #(or (if (< (:num-sets %) 1) {:num-sets true} nil) (if (= \"\" (:name %)) {:name true} nil)) exercises) \n        errors {:name invalid-name\n                :symbol invalid-symbol\n                :exercises (map-indexed (fn [i err] (when err {i err})) invalid-exercises)}]\n    (swap! form-data assoc :errors errors)\n    (println \"errors \" errors)\n    (not-any? identity \n        (mapv \n            #(if (seq? %)\n                (println \"(any? %) \" (any? %))\n            (println \"(identity %) \" (identity %))) \n        (vals errors)))))\n\n\n(defn update-templates []\n    (let [on-success #(swap! settings-state assoc :templates %)]\n        (fetch-templates on-success)))\n\n(defn update-template [id]\n    (println \"fetching template\")\n    (let [on-success #(do \n        (swap! settings-state (fn [prev] (assoc prev :selected-template id)))\n        (swap! form-data (fn [prev] (assoc prev :template (:id %) :exercises (vec (:exercises %)) :name (:name %) :symbol (:symbol %)))))]\n        (fetch-template id on-success)))\n\n(defn save-template [on-success]\n    (let [current-form-state @form-data\n          get-tracking-type-kw #(get-in % [:tracking-type :ident])\n          get-tracking-type-str #(str (namespace (get-tracking-type-kw %)) \"/\" (name (get-tracking-type-kw %)))\n          data (-> current-form-state\n            (dissoc :expanded)\n            (assoc :id (:template current-form-state) :exercises (mapv #(assoc % :num-sets (js/parseInt (:num-sets %)) :tracking-type (get-tracking-type-str %)) (:exercises current-form-state)))\n            (dissoc :template))]\n        (println \"form-valid? \" (form-valid?))\n        (when (form-valid?)\n            (println \"data \" data)\n            (println \"current-form-state \" current-form-state)\n            (api-call POST \"http://localhost:3000/templates\"\n                {:params data\n                 :format :json\n                 :response-format :json\n                 :keywords? true \n                 :handler #(do \n                    (update-templates)\n                    (when on-success (on-success)))\n                 :error-handler #(js/console.error \"Failed to add template\" %)}))))\n\n(defn new-template []\n    (swap! settings-state assoc :new-template true))\n\n(defn remove-at [v i]\n  (vec (concat (subvec v 0 i) (subvec v (inc i)))))\n\n(defn remove-exercise [index]\n    (swap! form-data assoc :exercises (vec (remove-at (:exercises @form-data) index))))\n\n(defn add-exercise []\n    (swap! form-data assoc :exercises (conj (:exercises @form-data) {:name \"New exercise\" :tracking-type {:ident :workout.exercise/weightxreps} :num-sets 1})))\n\n(defn template-editor [close-fn]\n    (let [data (:exercises @form-data)\n          name (:name @form-data)\n          symbol (:symbol @form-data)\n          errors (:errors @form-data)]\n          (println \"exercises \" data)\n        [:div \n        [:div {:class \"flex items-center gap-x-4\"}]\n        [:input {:class (str \"text-2xl font-bold w-1/8 border-2 border-gray-100 bg-white rounded-md\" (when (:symbol errors) \" border-red-500\")) :value symbol :on-change #(swap! form-data assoc :symbol (-> % .-target .-value))}]\n        [:input {:class (str \"text-2xl font-bold border-2 border-gray-100 bg-white rounded-md\" (when (:name errors) \" border-red-500\")) :value name :on-change #(swap! form-data assoc :name (-> % .-target .-value))}]\n        [:button {:class \"absolute top-2 right-2 p-2 text-gray-500 hover:text-red-500\"\n                :on-click close-fn}\n            [x-sign]]\n        [:div {:class \"grid grid-cols-1 items-center gap-y-4 mt-6\"}\n            (doall (for [[index exercise] (map-indexed vector data)]\n                (let [tracking-type (keyword (:ident (:tracking-type exercise)))]\n                ^{:key (str \"exercise\" index)}\n                [:div {:class \"flex flex-row justify-between items-center rounded-md bg-gray-50 border-gray-100\"}\n                    [:input {:class (str \"border-2 border-gray-100 bg-white rounded-md text-lg font-bold\" (when (get-in errors [:exercises index :name]) \" border-red-500\")):value (:name exercise) :on-change #(swap! form-data assoc-in [:exercises index :name] (-> % .-target .-value))}]\n                    [:select {:value tracking-type :on-change #(swap! form-data assoc-in [:exercises index :tracking-type] (-> % .-target .-value))}\n                        ^{:key \"weightxreps\"} [:option {:value :workout.exercise/weightxreps} \"Weight x Reps\"]\n                        ^{:key \"time\"} [:option {:value :workout.exercise/time} \"Time\"]]\n                    [:input {:class (str \"border-2 border-gray-100 bg-white rounded-md text-lg font-bold\" (when (get-in errors [:exercises index :num-sets]) \" border-red-500\")) :type \"number\" :value (:num-sets exercise) :on-change #(swap! form-data assoc-in [:exercises index :num-sets] (-> % .-target .-value))}]\n                    [:button {:class \"flex items-center gap-2 p-2 hover:bg-red-700 rounded-full bg-red-500 transition duration-200 text-white\" :on-click #(remove-exercise index)} [x-sign]] ])))\n            ^{:key \"add-exercise\"} [list-button {:text \"Add Exercise\" :variant :primary :icon plus-sign :on-click add-exercise :extra-classes \"w-1/3\"}]\n            ^{:key \"save-template\"} [list-button {:text \"Save Template\" :variant :primary :icon check-mark :on-click #(save-template close-fn) :extra-classes \"w-1/3 bg-green-300 hover:bg-green-400\"}]]]))\n                    \n\n(defn select-template []\n    (when (nil? (:templates @settings-state))\n        (update-templates))\n    (let [close-fn #(do \n        (reset! form-data {:template nil :exercises [] :expanded nil})\n        (reset! settings-state {:templates nil :selected-template nil}))\n        current-settings-state @settings-state]\n        (println \"current-settings-state\" current-settings-state)\n    [:div {:class \"relative p-4 bg-gray-50 min-h-screen\"} ;; Wrapper container\n    (cond \n        (nil? (:templates current-settings-state)) [:p \"Loading...\"]\n        :else (cond \n            (and (nil? (:selected-template current-settings-state)) (nil? (:new-template current-settings-state)))\n            [:div {:class \"grid grid-cols-1 items-center gap-y-4 mt-6\"}\n                (for [[index template] (map-indexed vector (:templates current-settings-state))]\n                    ^{:key (str \"template\" index)}\n                    [list-button {:text (:name template) :icon #(fn [] [:span {:class \"text-2xl\"} (:symbol template)]) :variant :secondary :on-click #(update-template (:id template))}])\n                [list-button {:text \"Add Template\" :icon plus-sign :variant :primary :on-click new-template :extra-classes \"w-1/3\"}]]\n            :else (template-editor close-fn)))]))"]}