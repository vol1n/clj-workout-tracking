{"version":3,"sources":["workout_demo_frontend/auth.cljs"],"mappings":";AAIA,AAAKA,8CAAW,gDAAA,hDAACC;AAEjB,uCAAA,vCAAMC;AAAN,AACE,4BAAA,rBAACC;;AAEH,wCAAA,xCAAMC,wFAAYC;AAAlB,AACE,IAAA,AACE,IAAME,UAAQ,iBAAAC,WAAQH;IAARG,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAc,mDAAAA,SAAA,5DAACC;IAAfD,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAAA,iBAAAA,jBAAgCE;IAAhCF,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAAA,KAAAA,LAAuCG;AAAvC,AAAA,GAAA,CAAAH,gBAAA;AAAA;;AAAA,kBAAAA,XAA+CI;;;AAA7D,AACEL;gBAFJ,GAAA,CAAAD,kBAGSO;AAHT,QAAAP,JAGkBQ;AAHlB,AAAA;;AAAA,AAAA,MAAAR;;;;AAKF,kDAAA,lDAAMS;AAAN,AACE,IAAMV,QAAM,AAACH;IACPc,UAAQ,AAACZ,sCAAWC;AAD1B,AAEE,oBAAMW;AAAN,AACE,IAAMC,WAAS,CAAA,SAAQ,AAAA,iFAAMD;IACvBE,MAAI,AAAU,KAAAC;AADpB,AAEE,QAAGD,MAAID;;AAHX;;;AAKJ,0CAAA,1CAAMG;AAAN,AACE,wBAAA,xBAACC;;AACD,yEAAA,lEAACC,sBAAOtB;;AAIV,sCAAA,tCAAMuB,oFAAUC,OAAOC,IAAIC;AAA3B,AACE,yGAAA,zGAACC;;AACD,yGAAA,zGAACA,iHAAgBD;;AACjB,IAAMrB,QAAM,AAACH;IACP0B,UAAQ,yBAAA,2CAAA,gGAAA,lJAAIvB,kEAAuB,CAAA,sDAAeA;IAClDwB,qBAAmB,AAAA,qGAAgBH;IACnCI,wBAAsB,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;aAAA,AAAAE,4CAAAF,eAAA,pEAAaG;eAAb,AAAAD,4CAAAF,eAAA,tEAAoBI;AAApB,AACE,GAAI,oDAAA,pDAACC,6CAAEF;AACL,AAAI,aAAA,bAACG;;AACD,OAAClB;;AACL,oBAAMS;AAAN,AACE,IAAAU,WAAA,2CAAA,iEAAA,PAA6BJ,qEAAiBC;AAA9C,AAAA,4GAAAG,yCAAAA,7IAACV,mDAAAA,6DAAAA;;AADH;;;;IAE1BW,YAAU,mOAAA,2CAAA,mEAAA,jVAACC,uGAAM,oDAAA,pDAACC,+CAAOhB,mLAA+BE,+EAAuBE;AATrF,AAUE,yGAAA,zGAACH,kHAAiBtB;;AAClB,yGAAA,zGAACsB,sHAAqBa;;AACtB,QAAChB,uCAAAA,sDAAAA,jBAAOC,kCAAAA,9BAAIe,kCAAAA","names":["workout-demo-frontend.auth/logged-in?","reagent.core.atom","workout-demo-frontend.auth/get-token","js/localStorage.getItem","workout-demo-frontend.auth/decode-jwt","token","e27575","payload","G__27576","clojure.string.split","cljs.core/second","js/atob","js/JSON.parse","js/Error","_","workout-demo-frontend.auth/token-expired?","decoded","exp-time","now","js/Date","workout-demo-frontend.auth/logout!","js/localStorage.removeItem","cljs.core/reset!","workout-demo-frontend.auth/api-call","method","url","opts","cljs.core.println","headers","user-error-handler","default-error-handler","p__27577","map__27578","cljs.core/--destructure-map","cljs.core.get","status","response","cljs.core._EQ_","js/console.warn","G__27579","full-opts","cljs.core.merge","cljs.core.dissoc"],"sourcesContent":["(ns workout-demo-frontend.auth\n    (:require [reagent.core :as r]\n              [clojure.string :as str]))\n\n(def logged-in? (r/atom nil))\n\n(defn get-token []\n  (js/localStorage.getItem \"jwt\"))\n\n(defn decode-jwt [token]\n  (try\n    (let [payload (some-> token (str/split #\"\\.\") second js/atob js/JSON.parse)]\n      payload)\n    (catch js/Error _ nil)))\n\n(defn token-expired? []\n  (let [token (get-token)\n        decoded (decode-jwt token)]\n    (when decoded\n      (let [exp-time (* 1000 (:exp decoded)) \n            now (.getTime (js/Date.))]\n        (> now exp-time)))))\n\n(defn logout! []\n  (js/localStorage.removeItem \"auth-token\")\n  (reset! logged-in? nil))\n\n;; Higher Order Function for API calls, automatically attach auth - since I already used GET and POST for\n;; my API calls, I can just add api-call before them \n(defn api-call [method url opts]\n  (println \"api-call\")\n  (println \"opts \" opts)\n  (let [token (get-token)\n        headers (if token {\"Authorization\" (str \"Bearer \" token)} {})\n        user-error-handler (:error-handler opts)\n        default-error-handler (fn [{:keys [status response]}]\n                                (if (= status 401)\n                                  (do (js/console.warn \"Unauthorized! Logging out.\")\n                                      (logout!))\n                                  (when user-error-handler\n                                    (user-error-handler {:status status :response response}))))\n        full-opts (merge (dissoc opts :error-handler) {:headers headers :error-handler default-error-handler} )] ;; Call custom handler if exists\n    (println \"token \" token)\n    (println \"full-opts \" full-opts)\n    (method url full-opts)))"]}