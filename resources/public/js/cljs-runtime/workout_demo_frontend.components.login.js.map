{"version":3,"sources":["workout_demo_frontend/components/login.cljs"],"mappings":";AAKA,AAAKA,0DAAiB,gDAAA,2CAAA,6DAAA,GAAA,4DAAA,GAAA,uDAAA,jRAACC;AAEvB,oDAAA,pDAAMC,gHAAYC,WAAWC;AAA7B,AACI,2DAAA,gFAAA,2CAAA,wDAAA,AAAAC,yEAAA,0DAAA,qDAAA,2EAAA,qDAAA,8DAAA,KAAA,sEAAA,xqBAACC,uPACYN,saAIAG,kFACMC;;AAEvB,+CAAA,/CAAMK,sGAAOC;AAAb,AACI,oBAAM,iBAAAC,oBAAK,AAACC;AAAN,AAAA,oBAAAD;AAAA,IAAAA,wBAAiB,AAACE,sCAAW,AAACD;AAA9B,AAAA,oBAAAD;AAA0C,OAACG,cAAI,AAACC;;AAAhDJ;;;AAAAA;;;AAAN,AACI,uCAAA,vCAACK,sBAAON;;AADZ;;AADJ,0FAAA,mDAAA,2CAAA,wDAAA,0GAAA,mFAAA,kDAAA,2CAAA,wDAAA,6BAAA,gBAAA,mFAAA,sDAAA,2CAAA,wDAAA,sCAAA,qDAAA,OAAA,mEAAA,WAAA,2NAAA,+DAAA,WAAAH,/OAK0G,AAAA,2FAAA,AAAAF,gBAAYL;AALtH,AAKoJ,kIAAA,3HAACiB,mDAAMjB,wDAAiBkB,6EAAgB,AAAA,AAAAX;mBAL5L,mFAAA,sDAAA,2CAAA,wDAAA,sCAAA,qDAAA,WAAA,mEAAA,WAAA,0NAAA,+DAAA,WAAAC,9OAM8G,AAAA,0FAAA,AAAAH,gBAAYL;AAN1H,AAMwJ,kIAAA,3HAACiB,mDAAMjB,wDAAiBkB,4EAAgB,AAAA,AAAAV;qnBANhM,mFAAA,yDAAA,2CAAA,wDAAA,kEAAA,6DAAA,h9BAOQ,kLAAA,AAAA,mFAAA,8CAAA,2CAAA,wDAAA,sMAAA,1kBAAM,AAAA,qFAAA,AAAAH,gBAASL,8TAAsD,AAAA,qFAAA,AAAAK,gBAASL;AAPtF,AAS6B,OAACE,kDACV,WAAKiB;AAAL,AACI,yGAAA,zGAACC,qHAAoBD;;AACrB,qBAAA,rBAACE,2BAA8B,AAAA,iFAAMF;;AACrC,8CAAA,vCAACH,sBAAON;GACZ;AAAA,AAAO,kIAAA,uDAAA,lLAACO,mDAAMjB,wDAAiBkB;;WAdnD,mFAAA,qDAAA,2CAAA,wDAAA,6BAAA","names":["workout-demo-frontend.components.login/login-form-state","reagent.core.atom","workout-demo-frontend.components.login/post-login","on-success","on-error","cljs.core/deref","ajax.core.POST","p1__27575#","p1__27576#","workout-demo-frontend.components.login/login","logged-in?","and__5043__auto__","workout-demo-frontend.auth/get-token","workout-demo-frontend.auth/decode-jwt","cljs.core/not","workout-demo-frontend.auth/token-expired?","cljs.core/reset!","cljs.core.swap_BANG_","cljs.core/assoc","response","cljs.core.println","js/localStorage.setItem"],"sourcesContent":["(ns workout-demo-frontend.components.login\n    (:require [reagent.core :as r]\n              [ajax.core :refer [POST]]\n              [workout-demo-frontend.auth :refer [get-token decode-jwt token-expired?]]))\n\n(def login-form-state (r/atom {:username \"\" :password \"\" :error nil}))\n\n(defn post-login [on-success on-error]\n    (POST \"http://localhost:3000/login\"\n       {:params @login-form-state\n        :format :json\n        :response-format :json\n        :keywords? true ;; Ensure response keys are keywordized\n        :handler on-success\n        :error-handler on-error}))\n\n(defn login [logged-in?]\n    (when (and (get-token) (decode-jwt (get-token)) (not (token-expired?)))\n        (reset! logged-in? true))\n    [:div {:class \"flex flex-col items-center justify-center h-1/2 gap-y-4 border-2 border-gray-200 rounded-md p-4\"}\n        [:h1 {:class \"text-2xl font-bold\"} \"Login\"]\n        [:input {:class \"border-2 border-gray-200 rounded-md\" :type \"text\" :placeholder \"Username\" :value (:username @login-form-state) :on-change #(swap! login-form-state assoc :username (.. % -target -value))}]\n        [:input {:class \"border-2 border-gray-200 rounded-md\" :type \"password\" :placeholder \"Password\" :value (:password @login-form-state) :on-change #(swap! login-form-state assoc :password (.. % -target -value))}]\n        (when (:error @login-form-state) [:p {:class \"text-red-500 text-sm\"} (:error @login-form-state)])\n        [:button {:class \"p-2 bg-blue-500 hover:bg-blue-600 text-white rounded-full w-1/3\"\n                  :on-click #(post-login \n                    (fn [response] \n                        (println \"response \" response)\n                        (js/localStorage.setItem \"jwt\" (:jwt response))\n                        (reset! logged-in? true))\n                    (fn [] (swap! login-form-state assoc :error \"Username or password is incorrect\")))}\n            [:span {:class \"text-2xl font-bold\"} \"Login\"]]])\n"]}