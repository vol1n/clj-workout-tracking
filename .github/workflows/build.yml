name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: "us-east-1"
      ECR_REPO: clojure-workout-backend
      LAMBDA_FUNCTION_NAME: WorkoutDemoLambda
      CDK_BACKEND_STACK_NAME: BackendLambdaStack
      CDK_FRONTEND_STACK_NAME: FrontendCloudfrontStack
      DOCKER_TAG: latest
    steps:
      # - name: Install bb
      #   run: bash < <(curl -s https://raw.githubusercontent.com/babashka/babashka/master/install)

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Docker login
        run: echo "${{ secrets.DOCKER_PW }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Verify AWS Login
        run: aws sts get-caller-identity

      - name: Generate Docker Tag
        run: echo "DOCKER_TAG=$(date +%s)" >> $GITHUB_ENV  # Generates a unique timestamp tag

      - name: Print Docker Tag (Debug)
        run: echo "Generated Docker Tag $DOCKER_TAG"
      
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Prepare java
      #   uses: actions/setup-java@v3
      #   with:
      #     distribution: 'zulu'
      #     java-version: '8'

      - name: install babshka
        run: bash < <(curl -s https://raw.githubusercontent.com/babashka/babashka/master/install)

      - name: Set up Clojure
        uses: DeLaGuardo/setup-clojure@13.0
        with:
          cli: latest
          lein: latest

      - name: Install Frontend Dependencies && cd ..
        run: cd frontend && lein deps && npm i && cd ..

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/project.clj') }}
          restore-keys: |
            ${{ runner.os }}-m2-

 

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1

      # - name: Build container and push to ECR
      #   run: |
      #     lein uberjar
      #     docker build -t $ECR_REPO:$DOCKER_TAG .
      #     docker push $ECR_REPO:$DOCKER_TAG
        
      # - name: Log in to GHCR
      #   run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      # - name: Pull Prebuilt GraalVM Build Environment
      #   run: |
      #     docker pull ghcr.io/vol1n/graalvm-lambda-builder-jdk21:latest
      #     docker tag ghcr.io/vol1n/graalvm-lambda-builder-jdk21:latest graalvm-lambda-builder-jdk21

      # - name: HL BB stuff
      #   run: |
      #     bb hl:compile
      #     bb hl:native:conf || ls -lah .holy-lambda/build/ && pwd && java -jar .holy-lambda/build/output-agent.jar && exit 1
      #     bb hl:native:executable

      # - name: Build native binary
      #   run: |
      #     ./build-native.sh

      # - name: Zip native binary
      #   run: |
      #     mv .holy-lambda/build/lambda-binary .holy-lambda/build/bootstrap
      #     mkdir -p .holy-lambda/deploy
      #     cd .holy-lambda/build
      #     zip lambda-native.zip bootstrap
      #     cd ../..
      #     mv .holy-lambda/build/lambda-native.zip .holy-lambda/deploy

      # - name: ðŸ“¤ Upload ZIP to S3
      #   run: |
      #     aws s3 cp .holy-lambda/deploy/lambda-native.zip s3://workout-demo-lambda-bucket/lambda-native-${GITHUB_SHA}.zip

      - name: Install Node.js & AWS CDK
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Sync Dependencies
        run: |
          cd backend
          bb hl:babashka:sync
          bb -Duser.home=.holy-lambda -e "(require '[babashka.pods :as pods]) (pods/load-pod 'org.babashka/buddy \"0.3.4\")"
          ls -Ra .holy-lambda/
          cd ..

      - name: Deploy Backend
        run: |
          cd deployment
          npm install
          cdk deploy ${CDK_BACKEND_STACK_NAME} --require-approval never --parameters DockerTag=${DOCKER_TAG}
          cd ..

      - name: Get API Gateway URL
        run: |
          API_URL=$(aws cloudformation list-exports --query "Exports[?Name=='ApiGatewayInvokeUrl'].Value" --output text)
          echo "Using API Gateway URL: $API_URL"
          echo "{\"apiGatewayUrl\": \"$API_URL\"}" > resources/public/config.json

      - name: Build Frontend
        run: |
          cd frontend
          lein shadow release app
          cd ..

      - name: Deploy Frontend
        run: |
          cd deployment
          cdk deploy ${CDK_FRONTEND_STACK_NAME} --require-approval never
          cd ..
