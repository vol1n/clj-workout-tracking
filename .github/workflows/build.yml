name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: "us-east-1"
      ECR_REPO: clojure-workout-backend
      LAMBDA_FUNCTION_NAME: WorkoutDemoLambda
      CDK_BACKEND_STACK_NAME: BackendLambdaStack
      CDK_FRONTEND_STACK_NAME: FrontendStack
      DOCKER_TAG: latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '8'

      - name: Set up Clojure
        uses: DeLaGuardo/setup-clojure@13.0
        with:
          cli: latest
          lein: latest

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/project.clj') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Install Dependencies
        run: lein deps

      - name: Build Uberjar
        run: lein uberjar

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & Push Docker Image
        run: |
          docker build -t $ECR_REPO:$DOCKER_TAG .
          docker tag $ECR_REPO:$DOCKER_TAG ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$DOCKER_TAG
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$DOCKER_TAG

      - name: Build Frontend
        run: |
          lein shadow release app

      - name: Install Node.js & AWS CDK
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: CDK Deploy Backend
        run: |
          cd deployment
          npm install
          cdk deploy $CDK_BACKEND_STACK_NAME --require-approval never

      - name: CDK Deploy Frontend
        run: |
          cd deployment
          npm install
          cdk deploy $CDK_FRONTEND_STACK_NAME --require-approval never
